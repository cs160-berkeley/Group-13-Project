// Aquarium Device App// Written for CS160 Fall 2016// Team 13: Magnetic Magikarpslet Pins = require("pins");// State variablesvar filterStatus = "No";var foodStatus = "No";// Skinslet whiteSkin = new Skin({ fill:"white" });let blueSkin = new Skin({ fill: "#3a89fb" });// Styleslet titleStyle = new Style( { font: "bold 20px", color:"white" } );let buttonStyle = new Style({font: '16px', color: 'white'});let textStyle = new Style({font: '16px', color: 'black'});// State labelsvar filterLabel = new Label({ left:0, right:0, top: 10, height:40,								string:"Filter clean: " + filterStatus,								style: textStyle, 								behavior: Behavior ({									onUpdate: function(content, id, x, y, ticks) {										content.string = "Filter clean: " + filterStatus;									}								})							});var foodLabel = new Label({ left:0, right:0, top: 10, height:40,								string:"Fish fed: " + foodStatus,								style: textStyle, 								behavior: Behavior ({									onUpdate: function(content, id, x, y, ticks) {										content.string = "Fish fed: " + foodStatus;									}								})							});// HANDLERS// Data updatesHandler.bind("/getTankData", Behavior({    onInvoke: function(handler, message){        message.responseText = JSON.stringify( { count: filterStatus } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/changeFilter", Behavior({    onInvoke: function(handler, message){    	filterStatus = "Yes";        message.responseText = JSON.stringify( { count: filterStatus } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/getFoodData", Behavior({    onInvoke: function(handler, message){        message.responseText = JSON.stringify( { count: foodStatus } );        message.status = 200;        application.distribute("onUpdate");    }}));Handler.bind("/feed", Behavior({    onInvoke: function(handler, message){    	foodStatus = "Yes";        message.responseText = JSON.stringify( { count: foodStatus } );        message.status = 200;        application.distribute("onUpdate");    }}));// Interface designlet updateButton = new Container({	name: 'updateButton',	left: 80, right: 80, height: 40, top: 20, skin: blueSkin,	contents: [		new Label({ string: 'Update Device Data', style: buttonStyle })	],	active: true,	behavior: Behavior ({		onTouchBegan: function(content, id, x, y, ticks) {			Pins.invoke("/filterSensor/read", function(result) {			   if (result) {			   	  filterStatus = "Yes";			      trace("Device detects a clean filter.\n");			   } else {			      filterStatus = "No";			      trace("Device detects an unclean filter.\n");			   }			});			Pins.invoke("/foodSensor/read", function(result) {			   if (result) {			   	  foodStatus = "Yes";			      trace("Device detects fish were recently fed.\n");			   } else {			      foodStatus = "No";			      trace("Device detects that the fish are hungry.\n");			   }			});		},		onTouchEnded: function(content, id, x, y, ticks) {			application.distribute("onUpdate");		}	})});// Device screen layoutlet mainScreen = new Column({	left: 0, right: 0, top: 0, bottom: 0, skin: whiteSkin,	contents: [		new Label({ left:0, right:0, top: 10, height:40, skin: blueSkin, string:"Aquarium Device Monitor", style: titleStyle}),		filterLabel,		foodLabel,		updateButton	]});// Device behaviorclass DeviceBehavior extends Behavior {    onLaunch(application) {		Pins.configure({			filterSensor: {		    	require: "Digital",		    	pins: {		    		power: {pin: 56, voltage: 3.3, type: "Power"},		         	ground: {pin: 57, type: "Ground"},		         	digital: {pin: 58, direction: "input"}		    	}		    },		    foodSensor: {		    	require: "Digital",		    	pins: {		    		power: {pin: 59, voltage: 3.3, type: "Power"},		         	ground: {pin: 60, type: "Ground"},		         	digital: {pin: 61, direction: "input"}		    	}		    }		},		function(success) {			if (!success) trace("Failed to configure\n");		});		application.shared = true;    }    onQuit(application) {        application.shared = false;    }}application.behavior = new DeviceBehavior();application.add(mainScreen);